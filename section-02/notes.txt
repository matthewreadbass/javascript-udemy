- JavaScript console (to test JS in browser) = cmd+option+j (mac) or ctrl+alt+j (windows)

- display an alert box
  - alert('Hello World!')
- set a variable
  - let variable = 'I am a variable'
- write an if statement
  - if (variable === 'I am a varible!') alert('It is a variable')
- print to the console
  - console.log('stuff to print');
  - console.log('stuff to print', 'other stuff to print');

JavaScript is a high-level, object-oriented, multi-paradigm programming language
JavaScript is the verbs of web development (HTML = nouns & CSS = adjectives)

Modern JavaScript started with the release of ES6/ES2015

Seperate concerns by writing individual script.js files and then referencing them in the <body> tag
  - <script src="script.js"></script>

Usually, JS is attached to web pages, so needs to be attached to an .html document
  - write JS using <script> tags

A value is the most fundamental unit of information in JS - strings, numbers, booleans etc.
  - store in variables (declare)
    - let firstName = 'Matthew';

use camelCase to name variables
  - variable names can only contain letters, numbers, _ and $

In JS, values are either Objects or primitives
  - Object:
    let me = {
      name: 'Matthew'
    };
  - Primitive:
    let firstName = 'Matthew';
    let age = 27;

Primitive data types:
  - Numbers (decimals and integers are all numbers)
  - strings
  - Booleans
  - Undefined (no value assigned) - let children;
  - Null
  - Symbol
  - BigInt (numbers too big to be represented by Numbers)

Dynamic Typing - not Static Typing
  - Only use let when you declare a value, not when you change the value

Comments:
  // single line comment
  /* Multi-line
    comment */

You can use double or single quotes to create a string

typeof operator works the same as object.class in Ruby

let
  - declare variables that are mutable / undefined
    let age = 30;
    age = 31;

const
  - value cannot be changed (immutable)
    const birthYear = 1994;
  - use as default
    - good to have as few mutable variables as possible in your code

var
  - used in legacy codebases
  - commonplace before ES6
  - works the same as let
    var age = 30;
    age = 31;

Basic operators:
  - Allows us to transform/combine values
    - Math / Arithmetic operators
      +   -   /   *   **
    - Assignment operators
      =   +=   -=   /=   *=   ++   --
    - Comparison operators
      >   <   >=   <=   !=

Operator Precedence
  - Javascript Operator precedence dictates the order in which operators are used
    - Google "MDN Operator Precedence" for a useful table
    - Maths comes before comparison, which comes before assignment
    - Certain operators read left-to-right, others from right-to-left
    - Parentheses always come firstName

Strings and template literals
  - If your string has an apostrophe, you need to use "double quotes"
  - To save the effort of constantly changing between ", ' & ` for your strings/template literals, you can simply always use `, whether or not you are using a template literal
  - Template literals make it possible to write multi-line strings without using \n\:
    - With quotes:
      console.log("String with \n\
      multiple \n\
      lines");
    - With backticks:
      console.log(`String with 
      multiple
      lines`);

If statements
  if(condition) {
    block will be executed if condition === true
  } else if (secondCondition) {
    block will be executed if condition === false && secondCondition === true
  } else {
    block will be executed if condition === false
  }
  - else if & else are optional
  - If your if statement's block is only one line, you can ommit the curly braces:
    if(condition) console.log("I will log to the console if the condition === true");

Type Conversion and Coercion
  - Type Conversion is when the user manually converts from one type to another
    - Number(numberAsString); returns numberAsString as a number datatype
    - String(number); returns number as a string datatype
  - Type Coercion is when JS automatically converts from one type to another behind the scenes (implicit)
    - console.log("I am " + 27 + " years old");
    - console.log(`I am ${age} years old`);
    - console.log("23" - "10" - 3); -> returns 10 as a number datatype

Boolean values
  - 0, '', undefined, null, NaN are the only falsy values in JS
  - Everything else is truthy
  - Falsy values have to be converted in to a boolean to actually be false
    - console.log(Boolean(0));

Equality operators
  - === => "strict" equality operator
    - does not perform Type Coercion
    - only evaluates to true when both values are the same
    - 9 === 9 returns true
    - 9 === "9" returns false
  - == -> "loose" equality operator
    - does perform Type Coercion
    - evaluates to true when both values are the same, even in different states
    - 9 == 9 returns true
    - 9 == "9" also returns true
  - !== -> "strict" difference operator
    - does not perform Type Coercion
    - only evaluates to true when both values are different
    - 9 !== 9 returns false
    - 9 !== 8 returns true
    - 9 !== "9" returns true
    - 9 !== "8" returns true
  - != -> "loose" difference operator
    - does perform Type Coercion
    - evaluates to false when both values are the same, even in different states
    - 9 != 9 returns false
    - 9 != 8 returns true
    - 9 != "9" returns false
    - 9 != "8" returns true

Boolean Logic/Logical Operators
  - AND operator -> &&
    - returns true only if both variables are true
    - returns true if only one (or more) variable is true
  - OR operator -> ||
  - NOT operator -> !
    - inverts the boolean value of the (single) variable

The Switch Statement
  - Same concept as Ruby case statement
  - evaluates equality
  - use colon (not semi-colon) after your case
  - add break keyword at the end of each case statement
  - you can give multiple cases the same result by following them on from each other (2 & 3 below)
  - default works like "else"
    let n = 4;
    switch(n) {
      case 1:
        console.log("One");
        break
      case 2:
      case 3:
        console.log("Two or three);
        break
      case 4:
        console.log("Four");
        break
      default:
        console.log("Please choose another number");
    }