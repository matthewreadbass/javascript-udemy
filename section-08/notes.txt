A high-level overview of JS

    JS is a high-level, prototype-based object-oriented, 
    multi-paradigm, interpreted or just-in-time complied, 
    dynamic, single-threaded, garbage-collected programming language 
    with first-class functions and a non-blocking event loop 
    concurrency model

    - High-level - developer does not have to manage resources manually as it is all automated
    - Garbage-collected - automatically cleans the memory, so the developer doesn't have to
    - Interpreted or just-in-time compiled - Doesn't require compiling/interpretting before running
    - Multi-paradigm - Procedural/Object-Oriented/Functional Programming all in one
    - Prototype-based object-oriented - Prototypal inheritance (similar to Ruby inheritance?)
    - First-class functions - Functions are treatd as variables
    - Dynamic - Dynamic typing
    - Single-threaded - Runs in a single thread (so can only do one thing at a time)
    - Non-blocking event loop - Takes long running tasks, executes them in the background 
    and puts them back in the main thread once they are finished
    - Concurrency model - Handles multiple tasks happening at the same time

The JS engine & Runtime

    The JS engine is (at it's most basic) a program that executes JavaScript code
    Every browser has its own JS engine
        - Made up of a call stack and a heap

    Call Stack
        - Where code is executed
        - Executed using execution contexts

    Heap
        - Un-structured memory pool
        - Stores all objects an application needs

    Compilation vs interpretation
        Compilation
            - Entire source code is converted in to machine code at once
            - Then written in to a portable file that can be executed on any computed
            - Execution can happen long after compilation
        Interpretation
            - Interpreter runs through the source code and executes it line-by-line

    Modern JavaScript engines use a mix of compilation and interpretation
        - Called Just In Time Compilation (JIT)
        - No portable file, so execution happens immediately

    How is it compiled?
        - Parsed in to the Abstract Syntax Tree (AST)
            - Splits in to meaningful syntax/keywords and stored in a structured way
        - Compilation
            - Takes generated AST and compiles in to machine code
        - Execution
            - Happens in Call Stack

        - Optimisation
            - JS starts by making a poorly optimised version, to make run-time quicker
            - Optimisation then improves and recompiles the code during execution
            - Happens potentially multiple times between execution and compilation

    Run-time in the browser

    A container including all the things that we need to use JS
        - JS engine
        - Web APIs (DOM, timers, fetch API etc.)
        - Callback queue (click, timer, data etc.)
    
    Event loop
        - Essential for non-blocking concurrency model

Execution Contexts and the Call Stack

    Execution (continued)
        - Global Execution Context created for top-level code (code outside of functions)
            - Execution Context
                - An environment in which a piece of JS is executed
                - Stores all the necessary information for code to be evaluated
            - One Global Execution context: Default context, created for code that is not inside a function (top-level)
        - Execution of top-level code
        - A new execution context is created for each function call/callback (eg. page click)

    What's inside an execution context?
    - All generated during "creation phase" right before execution
        - Variable environment
            - let, const, var etc
            - functions
            - arguments object
        - Scope Chain
            - References to variables located outside of the current function
        - this keyword
    - arrow function execution contexts don't get their own arguments object OR this keyword
        - instead use the arguments object/this keyword from their closest regular function parent

    The Call Stack
        - A place where execution contexts get stacked on top of each other in order to keep track of where we are in the programme's execution
        - Ensures that the order of execution never gets lost

Scope and the Scope Chain

    Scoping
        - How our program's variables are organised and accessed.
        - "Where do variables live?"
        - "Where can we access a certain value/where not?"
    
    Lexical Scoping
        - Scoping is controlled by placement of functions and blocks in the code
    
    Scope
        - The space/environment in which a certain variable is declared (variable environment in the case of functions)
        - There is global scope, function scope and block scope

    Scope of a variable
        - The region of our code where a certain value can be accessed

    Global Scope
        - Outide of any function or block
        - Variables declared in global scope are accessible everywhere

    Function Scope
        - Variables are accessible only inside the function they were created in, not outside
        - Also called Local Scope

    Block Scope (ES6)
        -  Variables are accessible only inside the block they were created in (Block Scoped)
            - Eg. if blocks/for loops
            - HOWEVER, this only applies to let and const variables
        - Functions are also Block Scoped (only in strict mode)
    
    The Scope Chain
        - Scopes have access to variables from all outer Scopes (variable lookup)
            - Eg. a nested function will be able to access the variables of the function it is nested inside/the global scope
                - the outer function will not be able to access variables from the inner function
                - Variables in the global scope will not be able to access variable from either of the nested Functions
                - Only parent scopes can be used - not child/sibling scopes
            - The Scope Chain is a one-way street
    
    Scope Chain vs Call Stack
        - The Call Stack runs in the order that the programme/each function is called
        - The Scope Chain is all about the order in which functions are written in the code
            - However it has nothing to do with the order in which functions were called

Variable Environment: Hoisting and The TDZ

    Execution Context includes:
        - Variable Environment
        - Scope Chain
        - this Keyword

    Hoisting
        - Makes some types of variables accessible/usable in the code before they are actually declared
        - Before execution, code is scanned for variable declarations
        - For each variable a new property is created in the variable environment object
        - Hoisting is not the same for all variable types

        Function declarations
            - Are hoisted
            - Initial value in Environment Object set to the actual function
            - Block scoped (only true in strict mode - otherwise they are function scoped)

        var variables
            - Are hoisted - Undefined if accessed before declared in code (not error)
            - Initial value in Environment Object is undefined ^^^^
            - Function scoped

        let and const variables
            - Not hoisted
            - Initial value in Environment Object is uninitialised
                - Placed in TDZ (Temporal Dead Zone)
                    - Can't access variables between beginning of the code and the place where the variables are defined
            - Block scoped

        function expressions and arrows
            - Depends if created using var, let or const
            - Behave the same as above as they are simply variables

    Why TDZ?
        - Makes it easer to avoid and catch errors
            - Accessing variables before declaration is bad practice and should be avoided
        - Makes const variables actually work

    Why hoisting?
        - Using functions before actual declaration
        - Makes code more readable
        - var hoisting is just a byproduct
