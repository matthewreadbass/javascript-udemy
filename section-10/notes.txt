A Closer Look At Functions

Default Parameters

    Sometimes useful to have default parameters incase no parameters are passed in
        const aFunction = function (param1 = 100, param2 = 'default') {
            console.log(param1, param2);
        }
            |=> afunction(); => 100, 'default'
            |=> aFunction(1); => 1, 'default'
            |=> aFunction(1, 7); => 1, 7
    Otherwise parameters are undefined
    Can use values of previous input values to assign defaults
        const anotherFunction = function (param1, param2 = param1 * 2) {
            console.log(param1, param2);
        }
            |=> anotherFunction(35); => 35, 70
            |=> anotherFunction(35, 36); => 35, 36
    Skip an argument by setting it as undefined
        aFunction(undefined, 'cheese'); => 100, 'cheese'

First-Class and High-Order Functions

    First-Class functions:
        JS treats functions as first-class citizens
        This means that functions a simply values
        Functions are just another 'type' of object
            Store functions in variables of properties
            Pass functions as arguments to OTHER functions
            Return functions FROM functions
            Call methods on functions
    
    Higher-Order functions:
        A function that receives another function as an argument, that returns a function or both
        This is only possible because of first-class functions

Functions Accepting Callback Functions

    Enables us to split up our code in to more re-usable/inter-connected parts
    Allow us to create abstraction
        - Hide the detail of problems, so that they can be viewed from a more higher-level, more abstract perspective
    High-level/low-level are to do with the level of abstraction

The Call and Apply Methods

    .call
        - function.call(<object-for-.this-to-point-to>, arguments);
        - a method to be called on a function
        - first argument is what you want the .this keyword to point to
        - the following arguments are the original arguments of the function call
        - enables us to manually and explicitly set the .this keyword of any function we want to call
    .apply
        - function.apply(<object-for-.this-to-point-to>, [array, of, arguments]);
        - does essentially the same thing as the .call method, except that it doesn't
        receive a list of arguments after the .this keyword
        - instead accepts an array of arguments
        - not used that much any more in modern JavaScript
            - instead, use .call with the spread operator
            - function.call(<object-for-.this-to-point-to>, ...array-of-arguments);

The Bind Methods

    .bind
        - just like .call/.apply, allows us to manually set the .this keyword for any function call
        - .bind doesn't however immediately call the function
        - instead, it calls a new function where the .this keyword is 'bound'
            const Obj1Func = function.bind(object1);
            obj1Func(<arguments>);
                - the .this keyword is permanently set to object1 for the objFunc function
        - enables you to create multiple versions of the same function on multiple different objects
        whilst keeping your code dry
        - can pass in multiple arguments to be "set in stone"
            - (script.js => MRT are going on tour)
        - 'Partial Application'
            - some of the arguments of the original function are already applied
            - use .bind to pre-set argument values by setting where .this points to to null\
                const Obj1Func = function.bind(null, 23);
                    - this function doesn't have a .this keyword, so set to null
                    - partially apply argument values
            - different from default parameters as it creates a brand new, more specific function
            instead of the original function being changed