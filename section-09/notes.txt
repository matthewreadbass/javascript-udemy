Destructuring Arrays

    Destructuring
        - An ES6 feature
        - Unpacking values from an array/object in to seperate variables
        - Breaking a complex data structure down in to a smaller data structure (variable)

    Without destructuring
        const arr = [2, 3, 4];
        const a = arr[0]; => 2
        const b = arr[1]; => 3
        const c = arr[2]; => 4

    With destructuring
        const arr = [2, 3, 4];
        const [x, y, z] = arr;
        console.log(x); => will log 2
        console.log(y); => will log 3
        console.log(z); => will log 4

Destructuring Objects

    Same concept as with arrays
    Have to use exact property names to extract variables from the object
    
        const matthew = {
            name: "Matthew",
            age: 27,
            job: "Software Engineer",
        };

        const { name, age, job } = matthew;
        console.log(name); => will log "Matthew"
        console.log(age); => will log 27
        console.log(job); => will log "Software Engineer"

    If you want different variable names from original property names

        const { name: whatTheyIsCalled, age: howOldTheyIs, job: whatTheyDoesForALiving } = matthew;
        console.log(whatTheyIsCalled); => will log "Matthew"
        console.log(howOldTheyIs); => will log 27
        console.log(whatTheyDoesForALiving); => will log "Software Engineer"

The Spread Operator (...)

    Expand an array in to all of it's elements
    Unpack all array elements at once
    Only able to use it in places where you would write values seperated by commas (not objects)
        - Doesn't create new variables
    Use to create shallow copies of arrays and merge two arrays together
        const arrCopy = [...arr];
        const combinedArr = [...arr1, ...arr2];
    Spread Operator works on all iterables
        Iterable: arrays, strings, maps, sets
            Not objects (not strictly true)
        You can use iterables on all of above
            const string = 'string';
            const letters = [...string];
            console.log(letters); => ['s', 't', 'r', 'i', 'n', 'g']
        
        Since ES2018, the Spread operator now works on objects too!
            const newObject = {...object, newInformation, coolStuff};