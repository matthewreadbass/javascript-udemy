Destructuring Arrays

    Destructuring
        - An ES6 feature
        - Unpacking values from an array/object in to seperate variables
        - Breaking a complex data structure down in to a smaller data structure (variable)

    Without destructuring
        const arr = [2, 3, 4];
        const a = arr[0]; => 2
        const b = arr[1]; => 3
        const c = arr[2]; => 4

    With destructuring
        const arr = [2, 3, 4];
        const [x, y, z] = arr;
        console.log(x); => will log 2
        console.log(y); => will log 3
        console.log(z); => will log 4

Destructuring Objects

    Same concept as with arrays
    Have to use exact property names to extract variables from the object
    
        const matthew = {
            name: "Matthew",
            age: 27,
            job: "Software Engineer",
        };

        const { name, age, job } = matthew;
        console.log(name); => will log "Matthew"
        console.log(age); => will log 27
        console.log(job); => will log "Software Engineer"

    If you want different variable names from original property names

        const { name: whatTheyIsCalled, age: howOldTheyIs, job: whatTheyDoesForALiving } = matthew;
        console.log(whatTheyIsCalled); => will log "Matthew"
        console.log(howOldTheyIs); => will log 27
        console.log(whatTheyDoesForALiving); => will log "Software Engineer"

The Spread Operator (...)

    Expand an array in to all of it's elements
    Unpack all array elements at once
    Written on the RH side of the assignment operator (=)
    Only able to use it in places where you would write values seperated by commas (not objects)
        - Doesn't create new variables
    Use to create shallow copies of arrays and merge two arrays together
        const arrCopy = [...arr];
        const combinedArr = [...arr1, ...arr2];
    Spread Operator works on all iterables
        Iterable: arrays, strings, maps, sets
            Not objects (not strictly true)
        You can use iterables on all of above
            const string = 'string';
            const letters = [...string];
            console.log(letters); => ['s', 't', 'r', 'i', 'n', 'g']
        
        Since ES2018, the Spread operator now works on objects too!
            const newObject = {...object, newInformation, coolStuff};

Rest pattern and parameters

    Exact same syntax as spread operator
    Used to collect individual elements and condense them in to an array
    Takes the REST of the elements and makes a new array out of them
    Must be the last element in a destructuring assignment
        Can only ever be one rest in a destructuring assignment
    Written on the LH side of the assignment operator (=)
        const [ a, b, ...others ] = [1, 2, 3, 4, 5];
            |=> a = 1, b = 2, others = [3, 4, 5]
    Also works with objects
        Elements can't be skipped as objects aren't indexed
            const { 3, 4, ...others } = numbers;
            console.log(3); => { 3: 'three' }
            console.log(4); => { 4: 'four' }
            console.log(others); => { 1: 'one', 2: 'two', 5: 'five' }
    Can be used in function arguments

Short Circuiting (&& and ||)

    AND (&&) and OR (||) operators can be used for more than just with boolean values
        3 || 'Matthew' => 3
        0 && 'Matthew' => 0
    Logical Operators can:
        - use any data type
        - return any data type
        - perform short-circuit evaluation
    
    Short Circuiting with the || operator
        If the first value is a truthy value, it will return that value
            'hello' || 'cheese' => 'hello'
            false || 'cheese' => 'cheese'
        If more than two values present, the first truthy value will be returned

    Short Circuiting with the && operator
        Will return the first falsey value
            false && true => false
            'hello' && 'world' && 54 & undefined => undefined
        Will return the last value if all values are true
            12 && 'hello' => 'hello'

The Nullish Coalescing Operator (??)

    Introduced in ES2020
    Solves the issue of 0 being considered falsey when short circuiting with || and &&
        const zero = 0
        const zeroOrTen = zero || 10; => 10
            Fix using...
        const zeroOrTenNCO = zero ?? 10; => 0
    The Nullish Coalescing Operator works with the concept of nullish values, rather than falsey values
    Nullish values === null or undefined
        |=> DOES NOT include 0 or ''

Logical Assignment Operators

    Logical OR Assignment Operator
        Works similarly to += / -= exact
            reduce...
                this = this || that;
            to...
                this ||= that;
    As with short circuiting, doesn't work with 0 as it is considered falsey

    Logical Nullish Assignment Operator
        Same concept as the Nullish Coalescing Operator
            const this = 0;
            const that = 10;
            this ||= that; => 10
            this ??= that; => 0
    
    Logical AND Assignment Operator
        Replaces values if they exist
            this.number = 10;
            this.number &&= 15; => changes the value from 10 to 15
            this.word &&= 'hello'; => this.word does not exist and so nothing is evaluated
            console.log(this.word); => undefined

Looping Arrays - The for-of Loop

    Instead of setting up a for loop with a counter/condition 
    and updating the counter, use a for-of loop
        const nums = ['zero', 'one', 'two', 'three', 'four'];
        for (const num of nums) console.log(num);
            |=> 'zero'
            |=> 'one'
            |=> 'two'
            |=> 'three'
            |=> 'four'
    Can still use the continue & break keywords
    To access the index of each item
        for (const num of nums.entries()) {
            console.log(item);
        };
            |=> [0, 'zero'] // [indexPoistion, value]
            |=> [1, 'one']
            |=> [2, 'two']
            |=> [3, 'three']
            |=> [4, 'four']

Enhanced Object Literals

    Object Literal - An object written in using the {} syntax
        const object = {<some-stuff>};
        const otherObject = {<other-stuff>};

        instead of writing...
            otherObject: otherObject
        ... in object, simply write
            otherObject
    Write functions inside objects without the function keyword
        const object = {
            add(num1, num2) {
                return num1 + num2;
            }
        };
    Compute property names instead of having to write them out manually/literally
        ie. using array index positions/numeric calculations etc

Optional Chaining (?.)

    ES2020 Introduced
    If a certain property does not exist, undefined is returned immediately (instead of an error)
    Prevents having to use long, unnecesarry logic to test for the existance of things
    Used for deeply-nested objects with lots of optional properties
        object.method.questionableMethod?.finalMethod;
            |=> if .questionableMethod exists, .finalMethod will run
            |=> if not, will return undefined
    Chain multiple Optional Chaining operators
        object.method.questionableMethod?.questionableMethod2?.finalMethod;
            |=> will return undefined if either .questionableMethod doesn't exist on the object
    Can be used to check if a method exists before calling it
        object.method?.()
            |=> returns undefined if method does not exist
    Optional Chaining works on arrays, checking if they are empty
        const empty = [];
        const arr = [{value: 1}];
        empty[0]?.value ?? 'Array empty'; => 'Array empty'
        arr[0]?.value ?? 'Array empty'; => 1

Looping Objects: Object Keys, Values and Entries

    Different options, depending on what you want to loop over
    Object.keys(<property-name>);
        |=> creates an array of all the different keys associated to the specified property name
    Object.values(<property-name>);
        |=> creates an array of objects housing all the values of the specified property name
    Object.entries(<property-name>);
        |=> creates an array of arrays housing all the entries of the specified property name
        |=> use destructuring to access individual elements
            |=> script.js line 549

Sets

    A collection of unique values
    Cannot contain duplicates
        const myFirstSet = new Set(['a', 'load', 'of', 'unique', 'values']);
            Can input duplicate values, but the set will only contain one of each
    Can hold mixed data types
    Looks like an array
    Is an iterable
    The order of elements is irrelevant
        Cannot access elements by index
    Cannot retrieve values from a set (it is a set, not lots of individual items)

Maps

    A data structure that we can use to map values to keys
    Like an object, data is stored in key/value pairs
    Unlike objects, Map keys can have any type (as oppossed to strings only in objects)
        Keys could even be objects, arrays or other maps
    Easiest to create an empty map before passing in data
        const newMap = new Map();
    Then use the .set method to populate the map object
        newMap.set(<key>, <value>);
    You can chain multiple .set methods
        newMap
            .set(1, 'one')
            .set(2, 'two')
            .set(3, 'three');
    Use .has to see if a map has a key
        newMap.has(2); => true
        newMap.has(7); => false
    Delete elements with their key
        newMap.delete(3);
        newMap.has(3); => false
    See how many objects are in a map with .size
        newMap.size; => 3
    Remove all elements from the map
        newMap.clear();
    Populate a new map without .set method
        const mapName = newMap([
            [key1, value1],
            [key2, value2],
            [key3, value3]
        ])
    Convert a map to an array using the spread operator
        const arr = [...map];

Summary: Which Data Structure To Use

    Sources of data:
        The program itself - data written directly in the source code
        The UI - data input from the user or data written in the DOM
        External sources - Data fetched from an API etc
    The above are all collections of data - but where do we store them?
        |=> Data Structures! But which one?
            - Simple list? -> Arrays/Sets
            - Key/value pairs? -> Objects/Maps
        Other built in Data Structures:
            WeakMap
            WeakSet
        Non-built in:
            Stacks
            Queues
            Linked lists
            Trees
            Hash Tables
    
    Arrays vs Sets
        Use either for simple lists of values
        Arrays:
            Use when you need ordered lists of values
            Use when you want/can handle duplicates
            Use when you need to manipulate data
        Sets:
            Use when you need unique values
            Use when high-performance is really important
            Use to remove duplicates form arrays
    
    Objects vs Maps
        Use either when you need key/value pairs/you want to describe values with keys
        Objects:
            More tRaditional key/value store ("abused" objects)
            Easier to write and access values with . and [] syntax
            Use when you need to include functions (methods)
            Use when working with JSON (can convert to map)
        Maps:
            Better performance
            Keys can have any data type
            Easy to iterate over
            Easy to compute size
            Use when you simply need to map keys to values
            Use when you need keys that are not strings

Working with Strings

    Get characters from index position
        const string = 'strings';
        string[0] => 's'
    Also works on previously undefined strings
        'I am a new string'[7]; => 'n'
    Calculate length
        string.length; => 7
        'An undefined string'.length => 19
    .indexOf method
        string.indexOf('i') => 3
        Only gives first occurrence
        For last use .lastIndexOf
            string.lastIndexOf('s') => 6
    .slice method
        returns string starting at a certain index position
        argument is the index position of where the slice method starts
            string.slice(2) => 'rings'
        can also specify end parameters
            string.slice(2, 6) => 'ring'
            |=> sub-string ends BEFORE (not on) the ending index position
            |=> sub-string length can be calculated by subtracting the starting index position from the ending index position
                6 - 2 = 4 => string.slice(2, 6) will return a string of 4 characters
        use a negative argument to specify index position relative to the end
            string.slice(-3) => 'ngs'
        .toLowerCase / .toUpperCase do what it sounds like they should
        .trim removes white space (includes \n)
            '   hello'.trim => 'hello'
            .trimStart / .trimEnd also do as they say on the tin
        .replace replaces characters
            'cat'.replace('c', 'p'); => 'pat'
            .replaceAll does as it should
        .startsWith
            returns true/false depending on if the string starts with the specified character(s)
        .endsWith
            as above, but at the end...
        .includes
            returns true/false dependant on if the argument string is included in the string being searched