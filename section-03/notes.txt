JavaScript Fundamentals - Part 2

Activating Strict Mode:

    Makes it easier for you to write more secure JS code
    Must be the first statement in the script (excluding comments)
        'use strict';
    Forbids you writing certain code
    Creates visible errors in the developer console instead of failing silently
    Reserves a short list of variable names for features that might be used later in the programme

Functions

    A piece of code that can by used over and over again in our code
    Can hold multiple lines of code
        function functionName(args) {
            <block-body>;
        }
    Functions are called/run or invoked
        functionName();
    Used to process data

Function Declarations vs Expressions

    Function Declarations:
        function functionName(args) {
            <block-body>;
        }
        
        const constantName = variableName(args);

    Function Expressions:
        const variableName = function (args) {
            <block-body>;
        }

        const constantName = variableName(args);

    With no functionName for function expressions, these functions are called anonymous functions
    Function declarations can be called in the code before they are defined - function expressions cannot

Arrow Functions

    Shorthand function expression -> "Arrow Function"
        const functionName = variables => <block-bod>;

Functions Calling Other Functions

    Helps to abstract your process and keep your code DRY

Introduction to Arrays

    Same concept as Ruby...
        const arrayName = [arrayObject1, arrayObject2, arrayObject3];
        const arrayName = new Array(arrayObject1, arrayObject2, arrayObject3);
    Access elements using square bracket syntax (0 indexed)
    .length method still available
    Mutate array elements with square bracket syntax
        Arrays are not immutable
        Can be changed despite being declared as const
        Whole arrays cannot be changed, but individual items can

Basic Array Operations (Methods)

    arrayName.push(item);
        - adds item to the end of the array
    arrayName.unshift(item);
        - adds item to the beginning of the array
    arrayName.pop();
        - removes the last item of the array
    arrayName.shift();
        - removes the first item of the array
    arrayName.indexOf(itemName);
        - returns the index number of itemName
    arrayName.includes(itemName);
        - returns true/false, depending on whether itemName is in the array or not
        - does not perform type coercion

Objects

    An Object is a collection of key value pairs (a hash)
    Keys are also called properties
    Get a property from an object:
        - Dot Notation
            objectName.propertyName;
        - Brackets Notation
            objectName['propertyName']
        propertyName can be accesed with an evaluated value
            const propertyKey = 'Name';
            objectName['property' + propertyKey];
    Returns undefined if the property doesn't exist
    Add to object using both syntaxes
        objectName.propertyName = 'valueName';
        objectName['propertyName'] = 'valueName;

Object Methods

    Possible to create a key/value pair where the value is a function
    Syntax:
        const objectName = {
            key1: value1,
            key2: value2,
            keyFunctionName: function (arguments) {
                <function-body>;
            }
        }
    Access other values from the object in your function using the "this" keyword
        const objectName = {
            key1: value1,
            key2: value2,
            keyFunctionName: function (arguments) {
                return this.key1 - 5;
            }
        }
    Use "this" keyword to store new values on the object
        const objectName = {
            key1: value1,
            key2: value2,
            keyFunctionName: function (arguments) {
                this.key3 = this.key2 + 1;
                return this.key3;
            }
        }

The For Loop

    Automate repetetive tasks
        for (counterStartingValue; evaluationCondition; iterationCondition) {
            <for-loop-body>;
        }

    counterStartingValue changes by iterationCondition (ie. counterStartingValue ++) on each repetition
    Loop continues to run while evaluationCondition === true

    continue keyword
        - exits the current iteration of the loop and continue to the next one
            if (condition) continue; **** must be inside a loop ****
    break keyword
        - exits the entire loop
            if (condition) break; **** must be inside a loop ****

Looping backwards and loops in loops

    As looping forward, but starting with a high number counter and decreasing the counter each time
    Do a loop in a loop

The While Loop

    while (condition) {
        <while-loop-block
    }
    Create variables (counters etc) outside of the while loop
    Runs while condition === true